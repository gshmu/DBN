<!DOCTYPE data-dictionary [
        <!ELEMENT data-dictionary (statement-execution-processor)*>
        <!ELEMENT statement-execution-processor (statement)*>
        <!ATTLIST statement-execution-processor
                id CDATA #REQUIRED
                is-query CDATA #IMPLIED
                is-prepared-statement CDATA #IMPLIED
                timeout CDATA #IMPLIED>
        <!ELEMENT statement (#PCDATA)>
        ]>
<data-dictionary>
    <statement-execution-processor id="schemas" is-query="true" is-prepared-statement="true">
        <statement>
            select
                SCHEMA_NAME,
                'N' as IS_PUBLIC,
                if(lower(SCHEMA_NAME)='information_schema', 'Y', 'N') as IS_SYSTEM,
                'N' as IS_EMPTY
            from information_schema.SCHEMATA
            order by SCHEMA_NAME asc
        </statement>
    </statement-execution-processor>
    <statement-execution-processor id="users" is-query="true" is-prepared-statement="true">
        <statement>
            select distinct
                GRANTEE as USER_NAME,
                'N' as IS_EXPIRED,
                'N' as IS_LOCKED
            from information_schema.USER_PRIVILEGES
            order by GRANTEE asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="tables" is-query="true" is-prepared-statement="true">
        <statement>
            select
                TABLE_NAME,
                'N' as IS_TEMPORARY
            from  information_schema.TABLES
            where
                TABLE_SCHEMA = {0} and
                TABLE_TYPE = 'BASE TABLE'
            order by TABLE_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="views" is-query="true" is-prepared-statement="true">
        <statement>
            select
                TABLE_NAME as VIEW_NAME,
                null as VIEW_TYPE_OWNER,
                null as VIEW_TYPE,
                if (TABLE_TYPE = 'VIEW', 'N', 'Y') as IS_SYSTEM_VIEW
            from information_schema.TABLES
            where
                TABLE_SCHEMA = {0} and
                TABLE_TYPE in ('VIEW', 'SYSTEM VIEW')
            order by TABLE_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="dataset-columns" is-query="true" is-prepared-statement="true">
        <statement>
            select
                col.COLUMN_NAME,
                col.ORDINAL_POSITION as `POSITION`,
                col.DATA_TYPE as DATA_TYPE_NAME,
                null as DATA_TYPE_OWNER,
                null as DATA_TYPE_PACKAGE,
                col.CHARACTER_MAXIMUM_LENGTH as DATA_LENGTH,
                col.NUMERIC_PRECISION as DATA_PRECISION,
                col.NUMERIC_SCALE as DATA_SCALE,
                'N' as IS_SET,
                left(col.IS_NULLABLE, 1) as IS_NULLABLE,
                'N' as IS_HIDDEN,
                if(col.COLUMN_KEY = 'PRI', 'Y', 'N') as IS_PRIMARY_KEY,
                if(kcu.COLUMN_NAME is null, 'N', 'Y') as IS_FOREIGN_KEY,
                'N' as IS_UNIQUE_KEY
            from information_schema.`COLUMNS` col
                    left join (
                        select
                            TABLE_SCHEMA,
                            TABLE_NAME,
                            COLUMN_NAME
                    from information_schema.KEY_COLUMN_USAGE
                    where REFERENCED_COLUMN_NAME is not null) kcu on
                        kcu.TABLE_SCHEMA = col.TABLE_SCHEMA and
                        kcu.TABLE_NAME = col.TABLE_NAME and
                        kcu.COLUMN_NAME = col.COLUMN_NAME
            where
                col.TABLE_SCHEMA = {0} and
                col.TABLE_NAME = {1}
            order by col.COLUMN_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="all-dataset-columns" is-query="true" is-prepared-statement="true">
        <statement>
            select
                col.COLUMN_NAME,
                col.TABLE_NAME as DATASET_NAME,
                col.ORDINAL_POSITION as `POSITION`,
                col.DATA_TYPE as DATA_TYPE_NAME,
                null as DATA_TYPE_OWNER,
                null as DATA_TYPE_PACKAGE,
                col.CHARACTER_MAXIMUM_LENGTH as DATA_LENGTH,
                col.NUMERIC_PRECISION as DATA_PRECISION,
                col.NUMERIC_SCALE as DATA_SCALE,
                'N' as IS_SET,
                left(col.IS_NULLABLE, 1) as IS_NULLABLE,
                'N' as IS_HIDDEN,
                if(col.COLUMN_KEY = 'PRI', 'Y', 'N') as IS_PRIMARY_KEY,
                if(kcu.COLUMN_NAME is null, 'N', 'Y') as IS_FOREIGN_KEY,
                'N' as IS_UNIQUE_KEY
            from information_schema.`COLUMNS` col
                    left join (
                        select
                            TABLE_SCHEMA,
                            TABLE_NAME,
                            COLUMN_NAME
                    from information_schema.KEY_COLUMN_USAGE
                    where REFERENCED_COLUMN_NAME is not null) kcu on
                        kcu.TABLE_SCHEMA = col.TABLE_SCHEMA and
                        kcu.TABLE_NAME = col.TABLE_NAME and
                        kcu.COLUMN_NAME = col.COLUMN_NAME
            where
                col.TABLE_SCHEMA = {0}
            order by
                col.TABLE_NAME,
                col.COLUMN_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="all-constraints" is-query="true" is-prepared-statement="true">
        <statement>
            select
                tc.TABLE_NAME as DATASET_NAME,
                case
                    when tc.CONSTRAINT_TYPE = 'PRIMARY KEY' then concat('pk_', tc.TABLE_NAME)
                    when tc.CONSTRAINT_TYPE = 'UNIQUE' then concat('unq_', tc.TABLE_NAME)
                    else tc.CONSTRAINT_NAME
                end as CONSTRAINT_NAME,
                tc.CONSTRAINT_TYPE,
                rc.UNIQUE_CONSTRAINT_SCHEMA as FK_CONSTRAINT_OWNER,
                case
                    when rc.UNIQUE_CONSTRAINT_NAME = 'PRIMARY' then concat('pk_', rc.REFERENCED_TABLE_NAME)
                    when rc.UNIQUE_CONSTRAINT_NAME = 'name' then concat('unq_', rc.REFERENCED_TABLE_NAME)
                    else rc.UNIQUE_CONSTRAINT_NAME
                end as FK_CONSTRAINT_NAME,
                'Y' as IS_ENABLED,
                null as CHECK_CONDITION
            from
                information_schema.TABLE_CONSTRAINTS tc left join
                information_schema.REFERENTIAL_CONSTRAINTS rc on
                    rc.CONSTRAINT_SCHEMA = tc.CONSTRAINT_SCHEMA and
                    rc.CONSTRAINT_NAME = tc.CONSTRAINT_NAME and
                    rc.TABLE_NAME = tc.TABLE_NAME
            where
                tc.TABLE_SCHEMA = {0}
            order by
                tc.TABLE_NAME,
                tc.CONSTRAINT_NAME asc
        </statement>
        <statement>
            select
                tc.TABLE_NAME as DATASET_NAME,
                case
                    when tc.CONSTRAINT_TYPE = 'PRIMARY KEY' then concat('pk_', tc.TABLE_NAME)
                    when tc.CONSTRAINT_TYPE = 'UNIQUE' then concat('unq_', tc.TABLE_NAME)
                    else tc.CONSTRAINT_NAME
                end as CONSTRAINT_NAME,
                tc.CONSTRAINT_TYPE,
                null as FK_CONSTRAINT_OWNER,
                null as FK_CONSTRAINT_NAME,
                'Y' as IS_ENABLED,
                null as CHECK_CONDITION
            from
                information_schema.TABLE_CONSTRAINTS tc
            where
                tc.TABLE_SCHEMA = {0}
            order by
                tc.TABLE_NAME,
                tc.CONSTRAINT_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="constraints" is-query="true" is-prepared-statement="true">
        <statement>
            select
                tc.TABLE_NAME as DATASET_NAME,
                case
                    when tc.CONSTRAINT_TYPE = 'PRIMARY KEY' then concat('pk_', tc.TABLE_NAME)
                    when tc.CONSTRAINT_TYPE = 'UNIQUE' then concat('unq_', tc.TABLE_NAME)
                    else tc.CONSTRAINT_NAME
                end as CONSTRAINT_NAME,
                tc.CONSTRAINT_TYPE,
                rc.UNIQUE_CONSTRAINT_SCHEMA as FK_CONSTRAINT_OWNER,
                case
                    when rc.UNIQUE_CONSTRAINT_NAME = 'PRIMARY' then concat('pk_', rc.REFERENCED_TABLE_NAME)
                    when rc.UNIQUE_CONSTRAINT_NAME = 'name' then concat('unq_', rc.REFERENCED_TABLE_NAME)
                    else rc.UNIQUE_CONSTRAINT_NAME
                end as FK_CONSTRAINT_NAME,
                'Y' as IS_ENABLED,
                null as CHECK_CONDITION
            from
                information_schema.TABLE_CONSTRAINTS tc left join
                information_schema.REFERENTIAL_CONSTRAINTS rc on
                    rc.CONSTRAINT_SCHEMA = tc.CONSTRAINT_SCHEMA and
                    rc.CONSTRAINT_NAME = tc.CONSTRAINT_NAME and
                    rc.TABLE_NAME = tc.TABLE_NAME
            where
                tc.TABLE_SCHEMA = {0} and
                tc.TABLE_NAME = {1}
            order by
                tc.TABLE_NAME,
                tc.CONSTRAINT_NAME asc
        </statement>
        <statement>
            select
                tc.TABLE_NAME as DATASET_NAME,
                case
                    when tc.CONSTRAINT_TYPE = 'PRIMARY KEY' then concat('pk_', tc.TABLE_NAME)
                    when tc.CONSTRAINT_TYPE = 'UNIQUE' then concat('unq_', tc.TABLE_NAME)
                    else tc.CONSTRAINT_NAME
                end as CONSTRAINT_NAME,
                tc.CONSTRAINT_TYPE,
                null as FK_CONSTRAINT_OWNER,
                null as FK_CONSTRAINT_NAME,
                'Y' as IS_ENABLED,
                null as CHECK_CONDITION
            from
                information_schema.TABLE_CONSTRAINTS tc
            where
                tc.TABLE_SCHEMA = {0} and
                tc.TABLE_NAME = {1}
            order by
                tc.TABLE_NAME,
                tc.CONSTRAINT_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="column-constraint-relations" is-query="true" is-prepared-statement="true">
        <statement>
            select
                COLUMN_NAME,
                case
                    when CONSTRAINT_NAME = 'PRIMARY' then concat('pk_', TABLE_NAME)
                    when CONSTRAINT_NAME = 'name' then concat('unq_', TABLE_NAME)
                    else CONSTRAINT_NAME
                end as CONSTRAINT_NAME,
                ORDINAL_POSITION as POSITION
            from information_schema.KEY_COLUMN_USAGE
            where
                TABLE_SCHEMA = {0} and
                TABLE_NAME = {1}
            order by COLUMN_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="all-column-constraint-relations" is-query="true" is-prepared-statement="true">
        <statement>
            select
               TABLE_NAME as DATASET_NAME,
               COLUMN_NAME,
               case
                    when CONSTRAINT_NAME = 'PRIMARY' then concat('pk_', TABLE_NAME)
                    when CONSTRAINT_NAME = 'name' then concat('unq_', TABLE_NAME)
                    else CONSTRAINT_NAME
               end as CONSTRAINT_NAME,
               ORDINAL_POSITION as POSITION
            from information_schema.KEY_COLUMN_USAGE
            where TABLE_SCHEMA = {0}
            order by TABLE_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="indexes" is-query="true" is-prepared-statement="true">
        <statement>
            select distinct
                INDEX_NAME,
                if (NON_UNIQUE = 'YES', 'N', 'Y') as IS_UNIQUE,
                'Y' as IS_VALID
            from information_schema.STATISTICS
            where
                TABLE_SCHEMA = {0} and
                TABLE_NAME = {1}
            order by INDEX_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="all-indexes" is-query="true" is-prepared-statement="true">
        <statement>
            select distinct
                INDEX_NAME,
                TABLE_NAME,
                if (NON_UNIQUE = 'YES', 'N', 'Y') as IS_UNIQUE,
                'Y' as IS_VALID
            from information_schema.STATISTICS
            where TABLE_SCHEMA = {0}
            order by
                TABLE_NAME,
                INDEX_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="column-index-relations" is-query="true" is-prepared-statement="true">
        <statement>
            select
                COLUMN_NAME,
                INDEX_NAME
            from information_schema.STATISTICS
            where
                TABLE_SCHEMA = {0} and
                TABLE_NAME = {1}
            order by COLUMN_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="all-column-index-relations" is-query="true" is-prepared-statement="true">
        <statement>
            select
                TABLE_NAME,
                COLUMN_NAME,
                INDEX_NAME
            from information_schema.STATISTICS
            where TABLE_SCHEMA = {0}
            order by TABLE_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="view-source-code" is-query="true" is-prepared-statement="true">
        <statement>
            select VIEW_DEFINITION
            from information_schema.VIEWS
            where
                TABLE_SCHEMA = {0} and
                TABLE_NAME = {1}
        </statement>
    </statement-execution-processor>    

    <statement-execution-processor id="load-distinct-values" is-query="true">
        <statement>
            select distinct {2} from {0}.{1} where {2} is not null order by {2}
        </statement>
    </statement-execution-processor>    

    <statement-execution-processor id="set-current-schema">
        <statement>
            use {0}
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="validate-connection" timeout="5" is-prepared-statement="true">
        <statement>
            select 1
        </statement>
    </statement-execution-processor>

</data-dictionary>
