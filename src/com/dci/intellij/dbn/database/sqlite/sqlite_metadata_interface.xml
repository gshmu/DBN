<!DOCTYPE data-dictionary [
        <!ELEMENT data-dictionary (statement-execution-processor)*>
        <!ELEMENT statement-execution-processor (statement)*>
        <!ATTLIST statement-execution-processor
                id CDATA #REQUIRED
                is-query CDATA #IMPLIED
                is-prepared-statement CDATA #IMPLIED
                timeout CDATA #IMPLIED>
        <!ELEMENT statement (#PCDATA)>
        ]>
<data-dictionary>
    <statement-execution-processor id="schemas" is-query="true" is-prepared-statement="true">
        <statement>
            select
                'main' as SCHEMA_NAME,
                'N' as IS_PUBLIC,
                'N' as IS_SYSTEM,
                'N' as IS_EMPTY
            union
            select
                'temp' as SCHEMA_NAME,
                'N' as IS_PUBLIC,
                'N' as IS_SYSTEM,
                'N' as IS_EMPTY
        </statement>
    </statement-execution-processor>
    <statement-execution-processor id="users" is-query="true" is-prepared-statement="true">
        <statement>
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="tables" is-query="true" is-prepared-statement="true">
        <statement>
            select
                NAME as TABLE_NAME,
                'N' as IS_TEMPORARY
            from SQLITE_MASTER
            where
                TYPE = 'table'
            order by TABLE_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="views" is-query="true" is-prepared-statement="true">
        <statement>
            select
                NAME as VIEW_NAME,
                null as VIEW_TYPE_OWNER,
                null as VIEW_TYPE,
                'N' as IS_SYSTEM_VIEW
            from SQLITE_MASTER
            where
                TYPE = 'view'
            order by VIEW_NAME asc
        </statement>
    </statement-execution-processor>
    <statement-execution-processor id="dataset-names" is-query="true" is-prepared-statement="true">
        <statement>
            select
                NAME as DATASET_NAME
            from SQLITE_MASTER
            where
                TYPE = 'table' or
                TYPE = 'view'
            order by DATASET_NAME asc
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="dataset-columns" is-query="true">
        <statement>
            PRAGMA TABLE_INFO("{0}")
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="constraints" is-query="true" is-prepared-statement="true">
        <statement>
            PRAGMA INDEX_LIST("{0}")
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="column-constraint-relations" is-query="true" is-prepared-statement="true">
        <statement>
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="all-column-constraint-relations" is-query="true" is-prepared-statement="true">
        <statement>
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="indexes" is-query="true">
        <statement>
            PRAGMA INDEX_LIST("{0}")
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="column-index-relations" is-query="true" is-prepared-statement="true">
        <statement>
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="all-column-index-relations" is-query="true" is-prepared-statement="true">
        <statement>
        </statement>
    </statement-execution-processor>

    <statement-execution-processor id="view-source-code" is-query="true">
        <statement>
            select SQL
              from SQLITE_MASTER
             where TYPE = 'view'
               and NAME = '{0}'
        </statement>
    </statement-execution-processor>    

    <statement-execution-processor id="load-distinct-values" is-query="true">
        <statement>
            select distinct {2} from {0}.{1} where {2} is not null order by {2}
        </statement>
    </statement-execution-processor>    

    <statement-execution-processor id="validate-connection" timeout="5" is-prepared-statement="true">
        <statement>
            select 1
        </statement>
    </statement-execution-processor>

</data-dictionary>
